import discord
from discord.ext import commands
from discord.ui import Button, View
import subprocess
import threading
import yt_dlp
import asyncio
import datetime
import json
import os
import time
# ƒê·ªçc token t·ª´ file config.json
with open("token.json", "r") as config_file:
    config = json.load(config_file)

bot_token = config["BOT_TOKEN"]

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

queue = []  # Danh s√°ch h√†ng ch·ªù
is_playing = False  # Tr·∫°ng th√°i ƒëang ph√°t nh·∫°c
current_song = None  # B√†i nh·∫°c ƒëang ph√°t
queue_message = None  # Tin nh·∫Øn embed hi·ªÉn th·ªã h√†ng ch·ªù

# ƒê∆∞·ªùng d·∫´n file l∆∞u ID tin nh·∫Øn
QUEUE_MESSAGE_FILE = "queue_message.json"

def save_queue_message_id(message_id):
    """L∆∞u ID tin nh·∫Øn v√†o file JSON"""
    data = {"queue_message_id": message_id}
    with open(QUEUE_MESSAGE_FILE, "w") as file:
        json.dump(data, file)

def load_queue_message_id():
    """ƒê·ªçc ID tin nh·∫Øn t·ª´ file JSON"""
    if os.path.exists(QUEUE_MESSAGE_FILE):
        with open(QUEUE_MESSAGE_FILE, "r") as file:
            data = json.load(file)
            return data.get("queue_message_id")
    return None

def get_playlist_videos(playlist_url):
    """
    L·∫•y danh s√°ch video t·ª´ m·ªôt playlist YouTube.
    """
    ydl_opts = {
        "quiet": True,
        "extract_flat": True,
        "skip_download": True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        playlist_info = ydl.extract_info(playlist_url, download=False)
        if "entries" in playlist_info:
            return [
                {"title": video["title"], "url": video["url"]}
                for video in playlist_info["entries"]
            ]
    return []


def get_video_info(url):
    """
    L·∫•y th√¥ng tin video b·∫±ng yt-dlp.
    """
    ydl_opts = {"quiet": True, "format": "bestaudio"}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        return {
            "title": info.get("title", "Unknown Title"),
            "duration": info.get("duration", 0)
        }

def run_command_with_progress(url):
    """
    Ch·∫°y l·ªánh yt-dlp v√† ffplay ƒë·ªÉ ph√°t nh·∫°c.
    """
    try:
        yt_dlp_cmd = [
            "yt-dlp", "-f", "bestaudio", "--extract-audio", "--audio-quality", "0",
            "--quiet", "--no-warnings", "--output", "-",
            url
        ]
        ffplay_cmd = [
            "ffplay", "-i", "pipe:0", "-nodisp", "-autoexit", "-loglevel", "error"
        ]

        # Ch·∫°y yt-dlp v√† ffplay
        yt_dlp_proc = subprocess.Popen(yt_dlp_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ffplay_proc = subprocess.Popen(ffplay_cmd, stdin=yt_dlp_proc.stdout)

        # ƒê·ª£i qu√° tr√¨nh ffplay ho√†n th√†nh
        ffplay_proc.wait()

        # ƒê√≥ng yt-dlp
        yt_dlp_proc.terminate()

    except Exception as e:
        print(f"L·ªói khi ph√°t nh·∫°c: {e}")


async def play_next(ctx):
    """
    Ph√°t b√†i ti·∫øp theo trong h√†ng ch·ªù.
    """
    global is_playing, queue, current_song, queue_message

    if not queue:
        is_playing = False
        current_song = None
        await update_queue_message(ctx)
        return

    current_song = queue[0]  # L·∫•y b√†i ƒë·∫ßu ti√™n trong h√†ng ch·ªù
    await update_queue_message(ctx)

    is_playing = True
    url = current_song["url"]

    # L·∫•y th√¥ng tin video
    video_info = get_video_info(url)
    title = video_info["title"]
    duration_seconds = video_info["duration"]
    duration_formatted = str(datetime.timedelta(seconds=duration_seconds))

    print(f"\n\n--------------------------------------------------------------------------")

    print(f"\nüéµ ƒêang ph√°t: {title}")
    print(f"üïí T·ªïng th·ªùi l∆∞·ª£ng: {duration_formatted}")

    def play_song():
        """
        Ch·∫°y yt-dlp v√† ffplay ƒë·ªÉ ph√°t nh·∫°c.
        """
        yt_dlp_cmd = [
            "yt-dlp", "-f", "bestaudio", "--extract-audio", "--audio-quality", "0",
            "--quiet", "--no-warnings", "--output", "-",
            url
        ]
        ffplay_cmd = [
            "ffplay", "-i", "pipe:0", "-nodisp", "-autoexit", "-loglevel", "error"
        ]

        yt_dlp_proc = subprocess.Popen(yt_dlp_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ffplay_proc = subprocess.Popen(ffplay_cmd, stdin=yt_dlp_proc.stdout)

        yt_dlp_proc.stdout.close()  # ƒê√≥ng output yt-dlp ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ

        # B∆∞·ªõc 1: Hi·ªÉn th·ªã tr·∫°ng th√°i ch·ªù
        time.sleep(3)  # ƒê·ª©ng y√™n 3 gi√¢y

        # B∆∞·ªõc 2: C·∫≠p nh·∫≠t th·ªùi gian th·ª±c
        start_time = time.perf_counter()
        track_progress(start_time, duration_seconds)

        ffplay_proc.wait()  # ƒê·ª£i ffplay k·∫øt th√∫c

        asyncio.run_coroutine_threadsafe(finish_song(ctx), bot.loop)

    def track_progress(start_time, duration):
        """
        C·∫≠p nh·∫≠t th·ªùi gian ph√°t trong console (ch·∫°y ƒë·ªìng th·ªùi v·ªõi ffplay).
        """
        while is_playing:
            elapsed_time = int(time.perf_counter() - start_time)

            if elapsed_time >= duration:
                break

            time.sleep(1)  # C·∫≠p nh·∫≠t m·ªói gi√¢y

    # Ch·∫°y song song ph√°t nh·∫°c v√† c·∫≠p nh·∫≠t th·ªùi gian
    threading.Thread(target=play_song, daemon=True).start()



async def finish_song(ctx):
    """
    K·∫øt th√∫c b√†i nh·∫°c hi·ªán t·∫°i v√† chuy·ªÉn b√†i ti·∫øp theo.
    """
    global is_playing, queue, current_song
    queue.pop(0)  # X√≥a b√†i hi·ªán t·∫°i kh·ªèi h√†ng ch·ªù
    current_song = None
    is_playing = False
    await play_next(ctx)

class QueueControlView(discord.ui.View):
    def __init__(self, ctx):
        super().__init__(timeout=None)
        self.ctx = ctx

    @discord.ui.button(label="üõë", style=discord.ButtonStyle.secondary)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        global is_playing, queue, current_song

        await interaction.response.defer()

        is_playing = False
        queue.clear()
        current_song = None

        subprocess.run(["taskkill", "/IM", "ffplay.exe", "/F"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        queue_message_id = load_queue_message_id()
        if queue_message_id:
            try:
                queue_message = await self.ctx.channel.fetch_message(queue_message_id)
                embed = discord.Embed(title="üéµ H√†ng ch·ªù ph√°t nh·∫°c", color=discord.Color.blurple())
                embed.description = "H√†ng ch·ªù tr·ªëng."
                await queue_message.edit(embed=embed, view=self)
            except discord.NotFound:
                pass

    @discord.ui.button(label="‚è≠Ô∏è", style=discord.ButtonStyle.secondary)
    async def skip_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        global is_playing, queue, current_song

        await interaction.response.defer()  # Tr√°nh l·ªói interaction timeout

        if is_playing and queue:
            subprocess.run(["taskkill", "/IM", "ffplay.exe", "/F"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            if len(queue) > 1:  # C√≤n b√†i ti·∫øp theo
                queue.pop(0)  # X√≥a b√†i hi·ªán t·∫°i kh·ªèi h√†ng ch·ªù
                current_song = queue[0]  # Chuy·ªÉn sang b√†i ti·∫øp theo
                await play_next(self.ctx)  # Ph√°t ti·∫øp
            else:
                current_song = None
                is_playing = False  # Kh√¥ng c√≤n g√¨ ƒë·ªÉ ph√°t
                await update_queue_message(self.ctx)  # C·∫≠p nh·∫≠t h√†ng ch·ªù tr·ªëng
        else:
            await interaction.followup.send("üéµ Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ b·ªè qua.", ephemeral=True)

async def update_queue_message(ctx):
    global queue_message_id, queue, current_song

    queue_message_id = load_queue_message_id()

    queue_message = None
    if queue_message_id:
        try:
            queue_message = await ctx.fetch_message(queue_message_id)
        except discord.NotFound:
            queue_message = None

    if not queue_message:
        embed = discord.Embed(title="üéµ H√†ng ch·ªù ph√°t nh·∫°c", color=discord.Color.blurple())
        embed.description = "H√†ng ch·ªù tr·ªëng." if not queue else f"**ƒêang ph√°t: {queue[0]['title']}**\n\n"
        next_songs = queue[1:11]
        if next_songs:
            embed.description += "**Ti·∫øp theo:**\n" + "\n".join([f"  **#{i + 1}:** {song['title']}" for i, song in enumerate(next_songs)])

        if queue:
            embed.set_footer(text=f"üìä T·ªïng s·ªë b√†i trong h√†ng ch·ªù: {len(queue)}")

        queue_message = await ctx.send(embed=embed, view=QueueControlView(ctx))
        queue_message_id = queue_message.id
        save_queue_message_id(queue_message_id)

    embed = discord.Embed(title="üéµ H√†ng ch·ªù ph√°t nh·∫°c", color=discord.Color.blurple())

    if not queue:
        embed.description = "H√†ng ch·ªù tr·ªëng."
    else:
        embed.description = f"**ƒêang ph√°t: {queue[0]['title']}**\n\n"
        next_songs = queue[1:11]
        if next_songs:
            embed.description += "**Ti·∫øp theo:**\n" + "\n".join([f"  **#{i + 1}:** {song['title']}" for i, song in enumerate(next_songs)])

        embed.set_footer(text=f"üìä T·ªïng s·ªë b√†i trong h√†ng ch·ªù: {len(queue)}")

    await queue_message.edit(embed=embed, view=QueueControlView(ctx))

@bot.event
async def on_ready():
    print(f"Bot ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p v·ªõi t√™n: {bot.user}")

import asyncio
import datetime
import discord
import yt_dlp
from discord.ext import commands

@bot.command(name="play")
async def play(ctx, *, query: str):
    """
    Nh·∫≠n l·ªánh t·ª´ Discord, t√¨m video ho·∫∑c ph√°t nh·∫°c qua URL.
    H·ªó tr·ª£ c·∫£ t√¨m ki·∫øm, link video v√† link playlist.
    """
    global queue, is_playing
    request_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    await ctx.message.delete()
    is_url = query.startswith("http://") or query.startswith("https://")

    # X·ª≠ l√Ω URL playlist
    if is_url and "playlist" in query:
        embed_loading = discord.Embed(
            title="üìú ƒêang x·ª≠ l√Ω playlist...",
            description="Vui l√≤ng ch·ªù trong gi√¢y l√°t...",
            color=discord.Color.orange()
        )
        loading_msg = await ctx.send(embed=embed_loading)

        try:
            playlist_videos = await asyncio.to_thread(get_playlist_videos, query)
        except Exception as e:
            playlist_videos = None
            print(f"L·ªói l·∫•y playlist: {e}")

        if not playlist_videos:
            embed_error = discord.Embed(
                title="‚ùå L·ªói!",
                description="Kh√¥ng th·ªÉ l·∫•y danh s√°ch video t·ª´ playlist n√†y.",
                color=discord.Color.red()
            )
            await loading_msg.edit(embed=embed_error)
            await asyncio.sleep(5)
            await loading_msg.delete()
            return

        queue.extend(playlist_videos)  # Th√™m to√†n b·ªô playlist v√†o h√†ng ch·ªù
        await update_queue_message(ctx)

        embed_success = discord.Embed(
            title="‚úÖ Playlist ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ch·ªù!",
            description=f"**{len(playlist_videos)} b√†i h√°t ƒë√£ ƒë∆∞·ª£c th√™m**",
            color=discord.Color.green()
        )
        await loading_msg.edit(embed=embed_success)
        await asyncio.sleep(5)
        await loading_msg.delete()
        return  # K·∫øt th√∫c t·∫°i ƒë√¢y ƒë·ªÉ kh√¥ng l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch x·ª≠ l√Ω kh√°c

    # N·∫øu kh√¥ng ph·∫£i playlist, ti·∫øp t·ª•c x·ª≠ l√Ω t√¨m ki·∫øm/video ƒë∆°n l·∫ª
    search_message = None
    if not is_url:
        embed_search = discord.Embed(
            title="üéµ ƒêang t√¨m ki·∫øm...",
            description=f"**{query}**",
            color=discord.Color.blue()
        )
        embed_search.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {ctx.author} | Th·ªùi gian: {request_time}")
        search_message = await ctx.send(embed=embed_search)

    if is_url:
        url = query
        video_info = get_video_info(url)
    else:
        # T√¨m ki·∫øm tr√™n YouTube v·ªõi timeout
        def search_youtube(q):
            try:
                with yt_dlp.YoutubeDL({"quiet": True, "noplaylist": True, "timeout": 5}) as ydl:
                    result = ydl.extract_info(f"ytsearch:{q}", download=False)
                    return result['entries'][0] if 'entries' in result else None
            except Exception as e:
                print(f"L·ªói t√¨m ki·∫øm YouTube: {e}")
                return None

        video = await asyncio.to_thread(search_youtube, query)
        if not video:
            embed_error = discord.Embed(
                title="‚ùå L·ªói!",
                description=f"Kh√¥ng t√¨m th·∫•y video n√†o kh·ªõp v·ªõi t·ª´ kh√≥a: **{query}**.",
                color=discord.Color.red()
            )
            embed_error.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {ctx.author} | Th·ªùi gian: {request_time}")
            if search_message:
                await search_message.edit(embed=embed_error)
                await asyncio.sleep(5)
                await search_message.delete()
            else:
                await ctx.send(embed=embed_error)
            return

        url = video['webpage_url']
        video_info = {
            "title": video['title'],
            "duration": video['duration'],
        }

    queue.append({"title": video_info["title"], "url": url})
    await update_queue_message(ctx)

    # N·∫øu bot t√¨m ki·∫øm b·∫±ng t√™n, c·∫≠p nh·∫≠t tin nh·∫Øn thay v√¨ x√≥a ngay
    if search_message:
        embed_found = discord.Embed(
            title="‚úÖ ƒê√£ t√¨m th·∫•y!",
            description=f"**{video_info['title']}**",
            color=discord.Color.green()
        )
        embed_found.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {ctx.author} | Th·ªùi gian: {request_time}")
        await search_message.edit(embed=embed_found)
        await asyncio.sleep(5)
        await search_message.delete()

    # N·∫øu bot ch∆∞a ph√°t nh·∫°c, b·∫Øt ƒë·∫ßu ngay
    if not is_playing:
        await play_next(ctx)


@bot.command(name="skip")
async def skip(ctx):
    """
    B·ªè qua b√†i h√°t hi·ªán t·∫°i v√† ph√°t b√†i ti·∫øp theo trong h√†ng ch·ªù.
    """
    global is_playing, queue
    await ctx.message.delete()  # X√≥a tin nh·∫Øn y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng

    if is_playing:
        is_playing = False
        subprocess.run(["taskkill", "/IM", "ffplay.exe", "/F"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)  # D·ª´ng ffplay
        await finish_song(ctx)  # K·∫øt th√∫c b√†i h√°t hi·ªán t·∫°i v√† chuy·ªÉn b√†i ti·∫øp theo
        skip_message = await ctx.send("‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t v√† chuy·ªÉn sang b√†i ti·∫øp theo.")
    else:
        skip_message = await ctx.send("üéµ Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t ƒë·ªÉ b·ªè qua.")

    await asyncio.sleep(5)
    await skip_message.delete()  # X√≥a tin nh·∫Øn c·ªßa bot sau 5 gi√¢y

@bot.command(name="stop")
async def stop(ctx):
    """
    D·ª´ng ph√°t nh·∫°c.
    """
    global is_playing, queue, current_song
    is_playing = False
    queue.clear()
    current_song = None

    # G·ª≠i l·ªánh d·ª´ng t·ªõi ffplay
    subprocess.run(["taskkill", "/IM", "ffplay.exe", "/F"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # Xo√° tin nh·∫Øn y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
    await ctx.message.delete()

    # L·∫•y ID tin nh·∫Øn t·ª´ file v√† c·∫≠p nh·∫≠t
    queue_message_id = load_queue_message_id()
    if queue_message_id:
        try:
            queue_message = await ctx.channel.fetch_message(queue_message_id)
            embed = discord.Embed(title="üéµ H√†ng ch·ªù ph√°t nh·∫°c", color=discord.Color.blurple())
            embed.description = "H√†ng ch·ªù tr·ªëng."
            await queue_message.edit(embed=embed)
        except discord.NotFound:
            print("Tin nh·∫Øn h√†ng ch·ªù kh√¥ng t·ªìn t·∫°i.")
        except discord.Forbidden:
            print("Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tin nh·∫Øn h√†ng ch·ªù.")

    # G·ª≠i tin nh·∫Øn th√¥ng b√°o d·ª´ng nh·∫°c
    stop_message = await ctx.send("üéµ Ph√°t nh·∫°c ƒë√£ ƒë∆∞·ª£c d·ª´ng v√† h√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c x√≥a.")
    await asyncio.sleep(5)
    await stop_message.delete()

bot.run(bot_token)